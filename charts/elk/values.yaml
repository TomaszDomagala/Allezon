eck-stack:
  eck-elasticsearch:
    enabled: true
    version: 8.6.1
    fullnameOverride: elasticsearch
    annotations:
      eck.k8s.elastic.co/license: basic

    nodeSets:
      - name: default
        count: 1
        config:
        # Comment out when setting the vm.max_map_count via initContainer, as these are mutually exclusive.
        # For production workloads, it is strongly recommended to increase the kernel setting vm.max_map_count to 262144
        # and leave node.store.allow_mmap unset.
        # ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-virtual-memory.html
        #

        #          node.store.allow_mmap: false
        podTemplate:
          spec:
            initContainers:
              - name: sysctl
                securityContext:
                  privileged: true
                  runAsUser: 0
                command: [ 'sh', '-c', 'sysctl -w vm.max_map_count=262144' ]
              - name: ulimit
                securityContext:
                  privileged: true
                  runAsUser: 0
                command: [ 'sh', '-c', 'ulimit -n 65536 -u 4096' ]
            containers:
              - name: elasticsearch
                resources:
                  requests:
                    cpu: 1
                  limits:
                    memory: 1Gi
        volumeClaimTemplates:
          - metadata:
              name: elasticsearch-data # Do not change this name unless you set up a volume mount for the data path.
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 5Gi
              storageClassName: local-storage-elk


  eck-kibana:
    version: 8.6.1
    enabled: true
    fullnameOverride: kibana
    annotations:
      eck.k8s.elastic.co/license: basic

  eck-beats:
    enabled: true
    fullnameOverride: filebeat
    annotations:
      eck.k8s.elastic.co/license: basic

    serviceAccount:
      name: filebeat

    clusterRole:
      name: filebeat
      rules:
        - apiGroups: [ "" ]
          resources:
            - namespaces
            - pods
            - nodes
          verbs:
            - get
            - list
            - watch

    clusterRoleBinding:
      name: filebeat
      subjects:
        - kind: ServiceAccount
          name: filebeat
          namespace: default
      roleRef:
        kind: ClusterRole
        name: filebeat
        apiGroup: rbac.authorization.k8s.io


    spec:
      type: filebeat
      version: 8.6.1
      elasticsearchRef:
        name: elasticsearch
      kibanaRef:
        name: kibana
      config:
        filebeat:
          #          inputs:
          #            - type: container
          #              paths:
          #                - /var/log/containers/*.log
          autodiscover:
            providers:
              - type: kubernetes
                node: ${NODE_NAME}
                hints:
                  enabled: true
                  default_config:
                    type: container
                    paths:
                      - /var/log/containers/*${data.kubernetes.container.id}.log
        processors:
          - add_cloud_metadata: { }
          - add_host_metadata: { }
          - drop_event:
              when:
                not:
                  and:
                    - has_fields: [ "app" ]
                    - or:
                        - contains: { "log.level": "error" }
                        - contains: { "log.level": "fatal" }
                        - contains: { "log.level": "warn" }




      daemonSet:
        podTemplate:
          spec:
            serviceAccountName: filebeat
            automountServiceAccountToken: true
            terminationGracePeriodSeconds: 30
            dnsPolicy: ClusterFirstWithHostNet
            hostNetwork: true # Allows to provide richer host metadata
            containers:
              - name: filebeat
                securityContext:
                  runAsUser: 0
                  # If using Red Hat OpenShift uncomment this:
                  #privileged: true
                volumeMounts:
                  - name: varlogcontainers
                    mountPath: /var/log/containers
                  - name: varlogpods
                    mountPath: /var/log/pods
                  - name: varlibdockercontainers
                    mountPath: /var/lib/docker/containers
                env:
                  - name: NODE_NAME
                    valueFrom:
                      fieldRef:
                        fieldPath: spec.nodeName
            volumes:
              - name: varlogcontainers
                hostPath:
                  path: /var/log/containers
              - name: varlogpods
                hostPath:
                  path: /var/log/pods
              - name: varlibdockercontainers
                hostPath:
                  path: /var/lib/docker/containers



